#include <bits/stdc++.h>
using namespace std;
#define __Mammamia__                ios_base :: sync_with_stdio(false);
#define ll                          long long
#define MAXN                        100007

int n, bridges, root, node, maxComp, MaxDepth;
vector <int> tree[MAXN], dp(MAXN, 0), visited(MAXN, 0);

void init()
{
    maxComp = 0;
    for (int i = 0; i < MAXN; ++i) tree[i].clear(), dp[i] = 0, visited[i] = 0;
}

void dfs(int src, int parent, int depth)
{
    visited[src] = true; node++;
    if (MaxDepth < depth) MaxDepth = depth, root = src;

    for (auto x : tree[src])
        if (x != parent)
            dfs(x, src, depth + 1);
}

int main ()
{
    int test_case, case_no = 0; scanf("%d", &test_case);
    while(test_case--)
    {
        scanf("%d %d", &n, &bridges); init();
        for (int i = 0; i < bridges; ++i)
        {
            int u, v; scanf("%d %d", &u, &v);
            tree[u].push_back(v);
            tree[v].push_back(u);
        }

        for (int i = 1; i <= n; ++i)
        {
            if (!visited[i])
            {
                root = i, MaxDepth = 0, node = 0;
                dfs(i, -1, 1);
                node = 0, MaxDepth = 0;
                dfs(root, -1, 1);

                maxComp = max(maxComp, node);
                dp[node] = max(dp[node], MaxDepth);
            }
        }

        for (int i = n - 1; i > 0; --i) dp[i] = max(dp[i], dp[i + 1]);

        printf("Case %d:\n", ++case_no);

        int q; scanf("%d", &q);
        while(q--)
        {
            int k, maxLength; scanf("%d", &k);
            maxLength = dp[k];

            if (k > maxComp) puts("impossible");
            else if (k <= maxLength) printf("%d\n", k - 1);
            else printf("%d\n", maxLength + (k - maxLength) * 2 - 1);
        }
    }
    return 0;
}
